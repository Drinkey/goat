# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with derent fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command

30 18 * * * sh /home/example/ms/si-sync/si_sync.sh >> /tmp/si_sync.log 2>&1
00 08 */3 * * bash /home/example/ms/si-sync/validate_si_sync.sh >> /tmp/validate_si_sync.log 2>&1
# clear old packages once a week
00 12 * * 1 python3 -u /home/example/pi-docker/clear-packages.py >> /tmp/clear-pi.log 2>&1

# update pc github repos
30 06 * * * bash /home/example/pc-deploy/update_pc.sh >> /tmp/update_pc.log
## generate swagger ui for pc repos
00 07 * * * bash /home/example/pc-deploy/swagger_ui/docker_swagger.sh >> /tmp/docker_swagger.log
## pc repos d scripts
02 14 * * * python3 -u /home/example/thg/scripts/uid.py >> /tmp/uid.log 2>&1
#01 14 * * * python3 -u /home/example/thg/scripts/pcd.py >> /tmp/pcd.log 2>&1
## abc d scripts
03 14 * * * python3 -u /home/example/thg/scripts/po_uid.py >> /tmp/po_uid.log 2>&1
#01 08 * * * python3 -u /home/example/thg/scripts/po_jirad.py >> /tmp/po_jirad.log 2>&1
04 14 * * * python3 -u /home/example/thg/scripts/po_jirad.py >> /tmp/po_jirad.log 2>&1
## validate for data update
10 3 * * * bash /tmp/sleep.sh
#
10 14 * * * bash /tmp/sleep.sh
